<?php
/**
* Implementation of hook_perm().
*/
function commerce_rent_permission()
{
	$permissions = array();
	
	//Define permission for add to rent item for admin site.
  $permissions['add commerce rent item'] = array(
    'title' => t('Add Rent Commerce Item'),
    'description' => t('Perform administrative rights to Add Commerce Rent Item.'),
  );
	
	//Define permission for add to rent button for end user.
	$permissions['add to rent'] = array(
    'title' => t('Rent Button'),
    'description' => t('Perform user access rights for Rent Button.'),
  );
	
	//Define permission for configuration setting to end user.
	$permissions['commerce rent configuration'] = array(
    'title' => t('Commerce Rent User Configuration'),
    'description' => t('Perform administrative rights to Commerce Rent User Configuration. Which is used to define no of eligible item to user roles.'),
  );
	
	//Define permission for manage end user request.
	$permissions['manage commerce rent item'] = array(
    'title' => t('Manage Commerce Rent Item'),
    'description' => t('Perform administrative rights to Manage User Request.'),
  );
	
	//Define permission for Rent link at admin side.
	$permissions['administer commerce rent'] = array(
    'title' => t('Administer Commerce Rent'),
    'description' => t('Perform administrative rights to Commerce Rent main link. "Commerce Rent" is a main link if this link will appear than all other link will appear under this link.'),
	);
	
	//Define permission for Pick request list at admin side.
	$permissions['commerce rent pickup'] = array(
    'title' => t('Commerce Rent Pickup'),
    'description' => t('Perform administrative rights to Pickup, Proceed Pickup Request List.'),
  );
	
	//Define permission for rent tab at admin side.
	$permissions['bookshelf-tab'] = array(
    'title' => t('Bookshelf- Tab'),
    'description' => t('Given user rights for "Bookshelf tab" to the end user.'),
  );
	
	//Define permission for update item at admin side.
	$permissions['commercerent item update'] = array(
    'title' => t('Commerce Rent Update Item'),
    'description' => t('Perform administrative rights to Update Commerce Rent. which will return back from the end user.'),
  );
	
	//Define permission for add to wishlist item tab at end user side.
	$permissions['add to wishlist item-tab'] = array(
    'title' => t('Add To Wishlist Item- Tab'),
    'description' => t('Perform administration and user rights for "Commerce Rent Add to wishlist". "Library Wishlist" tab will show only those user who have access rights for this.'),
  );
	
	//Define permission for add to wishlist button at end user side.
	$permissions['add to library wishlist'] = array(
    'title' => t('Add to Library Wishlist Button'),
    'description' => t('Perform administration and user rights for "Add to Library wishlist" button. "Library Wishlist" button will show only those user who have access rights for this.'),
  );
	
	//Define permission for add to wishlist button at end user side.
	$permissions['commerce rent Pdf file generation'] = array(
    'title' => t('Rent PDF File Genrator'),
    'description' => t('Define administration rights for commerce rent docfile module. Which is used to show list of those user who have requested for the Book Rent and also show PDF link for those user.'),
  );
	
	//Define permission for history tab at end user side.
	$permissions['commerce rent item history'] = array(
    'title' => t('Rent Commerce Item History'),
    'description' => t('Perform administration rights for commerce rent history module.'),
  );

	//Define permission for Library wishlist at end user side.
	$permissions['library wishlist list'] = array(
    'title' => t('Library Wishlist List'),
    'description' => t('Perform administration tasks for commerce rent library wishlist module. This will show the list of those items which is request most for Rent.'),
  );
	
 return $permissions;
}

//Add "Rent" button to node
function commerce_rent_node_view($node, $view_mode, $langcode)
{
	if(user_access('add to rent'))
	{
		module_load_include('inc', 'commerce_rent', 'include/commerce_rent_button');
		
		//Get product id
		$product_id = $node->field_book_reference[LANGUAGE_NONE][0]['product_id'];
		
		//Get product details
		$product = commerce_product_load($product_id);
		
		//Save sku of the product in a variable
		$sku = $product->sku;
		
		//check status of the product in rent table
		$product_status = _product_status($sku);
		
		if($product_status == 1)
		{
			$role_rentproduct = rent_button_block_form($sku, $node->nid);
		
			if ($node->type=="book_display")
			{
				$node->content['rent_content'] = array(
				"#markup"=> $role_rentproduct,
				"#weight"=> 100
				);
			}
			return $node;
		}
	}
}

/**
* Implementation of hook_menu
*/
function commerce_rent_menu()
{
  $items = array();
  $items['admin/commerce/rent'] = array(
      'title' => t('COMMERCE RENT'),
			'type' => MENU_NORMAL_ITEM,
      'access callback' => 'user_access',
			'access arguments' => array('administer commerce rent'),
  );
  
	$items['admin/commerce/rent/items'] = array(
      'title' => t('ITEM'),
			'type' => MENU_NORMAL_ITEM,
      'access arguments' => array('add commerce rent item'),
      'access callback' => 'user_access',
  );
	
	$items['admin/commerce/rent/items/add'] = array(
      'title' => t('ADD ITEM'),
      'page callback' => 'drupal_get_form',
      'page arguments' => array('commerce_rent_form'),
      'access arguments' => array('add commerce rent item'),
      'access callback' => 'user_access',
      'file_path' => drupal_get_path('module', 'commerce_rent'),
      'file' => 'include/commerce_rent.inc',
  );
	
	$items['admin/commerce/rent/items/edit'] = array(
      'title' => t('EDIT ITEM'),
      'page callback' => '_commerce_rent_item_edit_list',
      'access arguments' => array('add commerce rent item'),
      'access callback' => 'user_access',
      'file_path' => drupal_get_path('module', 'commerce_rent'),
      'file' => 'include/commerce_rent_item_edit.inc',
  );
	
	$items['admin/commerce/rent/items/edit/%'] = array(
      'title' => t('EDIT ITEM'),
      'page callback' => 'drupal_get_form',
      'page arguments' => array('commerce_rent_item_edit_item_form'),
      'access arguments' => array('add commerce rent item'),
      'access callback' => 'user_access',
      'file_path' => drupal_get_path('module', 'commerce_rent'),
      'file' => 'include/commerce_rent_item_edit.inc',
  );
	
	$items['admin/commerce/rent/rent_config'] = array(
    'title' => t('CONFIGURATION'),
    'page callback' => 'rent_config_form',
    'access callback' => 'user_access',
    'access arguments' => array('commerce rent configuration'),
    'file_path' => drupal_get_path('module', 'commerce_rent'),
    'file' => 'include/commerce_rent_config.inc',
  );
	
	$items['admin/commerce/rent/request_manage'] = array(
    'title' => t('MANAGE REQUEST'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('rent_manage_form'),
    'access arguments' => array('manage commerce rent item'),
    'access callback' => 'user_access',
    'file_path' => drupal_get_path('module', 'commerce_rent'),
    'file' => 'include/commerce_rent_manage.inc',
  );
	
	$items['admin/commerce/rent/request_manage/%/%'] = array(
    'title' => t('MANAGE REQUEST'),
    'page callback' => 'request_close_form',
    'page arguments' => array(4, 5),
    'access callback' => 'user_access',
    'access arguments' => array('manage commerce rent item'),
    'file_path' => drupal_get_path('module', 'commerce_rent'),
    'file' => 'include/commerce_rent_manage.inc',
  );
	
	$items['rent/rent_button_link'] = array(
    'title' => t('RENT LINK'),
    'page callback' => '_rent_button_link_fuctionality',
    'page arguments' => array(2,3),
    'access callback' => TRUE,
    'access arguments' => array('access content'),
    'file_path' => drupal_get_path('module', 'commerce_rent'),
    'file' => 'include/commerce_rent_button.inc',
  );
	return $items;
}